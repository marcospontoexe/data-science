# -*- coding: utf-8 -*-
"""04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z4g1sOZqF85Jqhr_Tx6WUTpo3SN5oUYL
"""

import pandas as pd


url1 = "https://gist.githubusercontent.com/tgcsantos/85f8c7b0a2edbc3e27fcad619b37d886/raw/a4954781e6bca9cb804062a3eea0b3b84679daf4/Basico_SP1.csv"

ibge_sp = pd.read_csv(url1, encoding='ISO-8859-1', sep=';', thousands='.', decimal=',')
ibge_sp.dropna(how='all', axis=1, inplace=True)
ibge_sp

url2 = "https://gist.githubusercontent.com/tgcsantos/3bdb29eba6ce391e90df2b72205ba891/raw/22fa920e80c9fa209a9fccc8b52d74cc95d1599b/dados_imoveis.csv"
dados = pd.read_csv(url2)
dados

dados[["Moeda", "Valor_Moeda", "Tipo_Anuncio"]] = dados["Valor"].str.split(expand = True) #Cria mais três string no Objeto dados
dados

dados = dados[dados["Tipo_Anuncio"].isnull()] #dados recebe ele mesmo, mas apenas as linhas em que os índices da coluna "Tipo_Anuncio" estão vazios
dados

dados.info()

dados["Valor_Moeda"] = dados["Valor_Moeda"].str.replace(".","").astype(float) #A coluna "Valor_Moeda" recebe ela mesma, mas sem pontos e convertida para float
dados.info()

dados

enderecos = pd.read_csv('/content/drive/MyDrive/Programação/Ciência de dados/04/enderecos.csv') #csv com latitude e longitude
enderecos

end_sp = enderecos.query("sigla_uf == 'SP'")  #'end_sp' recebe apenas os endereço de São Paulo
end_sp

end_sp["rua"] = end_sp["tipo_logr"] + " " + end_sp["logr_nome"]     #cria mais uma coluna chamada "rua"
end_sp

end_sp["rua"] = end_sp["rua"].str.lower().str.strip()   #deixa tudo em minúsculo e tira o espaço extra
end_sp

dados       #CSV com os valores do imóveis

dados["Rua"].str.extract(r'(^[\w ]+)')   # Reject para excluir os números e caracteres especiais

dados["apenas_rua"] = dados["Rua"].str.extract(r'(^[\w ]+)')   #cria mais uma coluna "apenas_rua"
dados["apenas_rua"] = dados["apenas_rua"].str.lower().str.strip()   #deixa tudo em minúsculo e tira o espaço extra
dados

dados_geo = pd.merge(left = dados, right = end_sp[["rua", "cep", "latitude", "longitude"]], how = "left", left_on = "apenas_rua", right_on = "rua") #cria um novo banco de dados misturando "dados" com "end_sp", mas apenas as colunas selecionadas
dados_geo

#o 'merge' criará o 'dados_geo' com várias ruas repetidas, pois há vários "cep", "latitude" e "longitude" pertecentes a 'end_sp' que é comum para a mesma rua de 'dados' 
dados_geo = pd.merge(left = dados, right = end_sp[["rua", "cep", "latitude", "longitude"]], how = "left", left_on = "apenas_rua", right_on = "rua").drop_duplicates(subset=dados.columns).query("cep > 0")        #'drop_duplicates' remove as linhas duplicadas da coluna 
dados_geo

!pip install geopandas     #instala o pandas no computador

import geopandas as gpd     #importa a biblioteca geopandas

setor_censo = gpd.read_file("/content/drive/MyDrive/Programação/Ciência de dados/04/sp_setores_consitarios/35SEE250GC_SIR.shp")
setor_censo     #a coluna 'geometry contem dados da função 'poligono' do 'pandas'

setor_censo_sp = setor_censo[setor_censo.NM_MUNICIP == "SÃO PAULO"]     #cria um banco de dados com os valores apenas de são paulo
setor_censo_sp

from shapely.geometry import Point

latitude = -23.56
longitude = -46,59
Point(longitude, latitude)      #cria um ponto

from shapely.geometry import Polygon
Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]])       #cria um polígono

Polygon([[0, 0], [1, 0], [1, 1], [0, 1], [0, 0]]).contains(Point(0.1, 0.9))         #rerifica se o ponto está dentro do polígono

setor_censo_sp[setor_censo_sp.contains(Point(longitude, latitude))]     #retorna a linha que contem os mesmo pontos das colunas 'longitude' e 'latitude'

dados_geo["Point"] = ""     #cria uma coluna "Point" vazia
for i in dados_geo.index:
    dados_geo["Point"][i] = Point(dados_geo["longitude"][i], dados_geo["latitude"][i])  #adiciona a "longitude" e "latitude" na coluna "Point"
dados_geo

dados_geo["setor_censo"] = dados_geo["Point"][0:10].map(
    lambda x: setor_censo_sp.loc[setor_censo_sp.contains(x), "CD_GEOCODI"].values 
).str[0]

dados_geo

dados_geo = pd.read_csv("/content/drive/MyDrive/Programação/Ciência de dados/04/dados_geo.csv")
dados_geo

dados_vendas_censo = pd.merge(left = dados_geo[dados_geo["setor_censo"].notnull()], right = ibge_sp, how = "left", left_on = "setor_censo", right_on = "Cod_setor")
dados_vendas_censo.info()

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
sns.scatterplot(data = dados_vendas_censo, x = "V005", y = "Valor_m2")

