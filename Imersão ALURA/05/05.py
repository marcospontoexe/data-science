# -*- coding: utf-8 -*-
"""05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NCEiMB1XbmYSmWlw7lBk8xz4I2XMuDge
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

pd.set_option("display.precision", 2)
pd.set_option('display.float_format', lambda x: '%.2f' % x)
sns.set()

dados_vendas_censo = pd.read_csv("/content/drive/MyDrive/Programação/Ciência de dados/05/dados_vendas_censo.csv")
dados_vendas_censo = dados_vendas_censo[['Rua', 'Bairro', 'Cidade', 'Metragem', 'Quartos', 'Banheiros', 'Vagas',
       'Valor_anuncio', 'Valor_mm', 'Valor_m2', 'latitude', 'longitude', 'Situacao_setor', 'V001',
       'V002', 'V003', 'V004', 'V005', 'V006', 'V007', 'V008', 'V009', 'V010',
       'V011', 'V012']].dropna()        #seleciona apenas as colunas de interesse
dados_vendas_censo

plt.figure(figsize=(10, 8))
ax = sns.boxplot(data = dados_vendas_censo, y="Valor_anuncio")
plt.show()

dados_vendas_censo.query("Valor_anuncio > 30000000 | Valor_anuncio < 100000")       #mostra os imoveis contidos nesse intervalo  (apenas cinco)

dados_vendas_censo.drop(dados_vendas_censo.query("Valor_anuncio > 30000000 | Valor_anuncio < 100000").index, inplace = True)  #exclui os cinco imoveis
sns.boxplot(data = dados_vendas_censo, y="Valor_anuncio")

plt.figure(figsize=(10, 8))
sns.scatterplot(data = dados_vendas_censo, x="Valor_anuncio", y="Valor_m2")

dados_vendas_censo.corr()       #correlaciona as variáveis em comum (diagona principal)

plt.figure(figsize=(18, 8))
#https://www.tylervigen.com/spurious-correlations
mask = np.triu(np.ones_like(dados_vendas_censo.corr(), dtype=bool))     #exclui valores a cima da diagona principal
heatmap = sns.heatmap(dados_vendas_censo.corr(), mask=mask, vmin=-1, vmax=1, annot=True, cmap='BrBG')
heatmap.set_title('Correlação', fontdict={'fontsize':18}, pad=16);

from sklearn.linear_model import LinearRegression           #regressão linear
from sklearn.model_selection import train_test_split        #testar a RNA

X = dados_vendas_censo[["Metragem"]]    #dados para treinamento
Y = dados_vendas_censo["Valor_anuncio"] #dados para usar como resposta para o treino da RNA
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state= 54)       #retorna 4 conjuntos de  dados, dois para treino e dois para teste
lr = LinearRegression()
lr.fit(X_train, Y_train)         #treinando a RNA com dados de entrada(treino) e dados de saida (resposta)    
Y_predict_test = lr.predict(X_test)            #realiza uma predição
Y_predict_train = lr.predict(X_train)

from sklearn.metrics import mean_absolute_error, r2_score       # para verificar o treinamento da RNA 
mean_absolute_error(Y_test, Y_predict_test)                 #retorna a distancia entre os resultados esperados e os retornados (é o erro do treinamento)

